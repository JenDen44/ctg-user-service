name: Codex Comment-Triggered PR-wide Review (Backend)

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    if: >
      github.event.issue.pull_request != null &&
      contains(github.event.comment.body, '/review')
    runs-on: ubuntu-latest

    env:
      OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'o4-mini' }}
      PR_NUMBER: ${{ github.event.issue.number }}

    steps:
      - name: –ö–æ–Ω—Ç–µ–∫—Å—Ç
        run: |
          echo "COMMENT_URL=${{ github.event.comment.html_url }}" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "API=${{ github.api_url }}" >> $GITHUB_ENV

      # ========= Checkout PR HEAD (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã PR) =========
      - name: Checkout PR HEAD
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ env.PR_NUMBER }}/head
          fetch-depth: 0

      # ========= –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ =========
      - name: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ —Ä–µ–≤—å—é
        uses: actions/github-script@v7
        with:
          script: |
            const body = [
              "ü§ñ Codex: –Ω–∞—á–∞–ª backend-—Ä–µ–≤—å—é —ç—Ç–æ–≥–æ PR.",
              "",
              `_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ ${process.env.COMMENT_URL}_`
            ].join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.PR_NUMBER),
              body
            });

      # ========= OpenAI key hardening =========
      - name: Debug OPENAI key length (masked)
        run: |
          if [ -z "${OPENAI_API_KEY}" ]; then
            echo "EMPTY OPENAI_API_KEY secret"; exit 1;
          fi
          echo "OPENAI_API_KEY length: ${#OPENAI_API_KEY}"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Normalize OPENAI_API_KEY
        run: |
          CLEAN=$(printf "%s" "${OPENAI_API_KEY}" | tr -d '\r' | sed 's/[[:space:]]//g')
          if [ -z "$CLEAN" ]; then echo "Empty OPENAI_API_KEY after trim"; exit 1; fi
          echo "OPENAI_API_KEY_CLEAN=$CLEAN" >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: OpenAI auth smoke-test
        run: |
          set -euo pipefail
          curl -sS https://api.openai.com/v1/models \
            -H "Authorization: Bearer $OPENAI_API_KEY_CLEAN" \
            -H "Content-Type: application/json" \
            -o models.json -w "\nHTTP:%{http_code}\n"
          if jq -e '.error' models.json >/dev/null; then
            echo "OpenAI error:"; cat models.json; exit 1
          fi
          echo "OK: auth passed ‚úÖ"

      # ========= –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ñ—Ñ–æ–≤ —á–µ—Ä–µ–∑ API (–¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ inline –ø–æ–∑–∏—Ü–∏–π) =========
      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ diff PR
        id: globaldiff
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          PR=$PR_NUMBER
          curl -sSL \
            -H "Accept: application/vnd.github.v3.diff" \
            -H "Authorization: Bearer $GH_TOKEN" \
            "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${PR}" > global.diff

          MAX=160000
          if [ $(wc -c < global.diff) -gt $MAX ]; then
            head -c $MAX global.diff > global_trimmed.diff
            mv global_trimmed.diff global.diff
            echo "TRUNCATED=true" >> $GITHUB_ENV
          else
            echo "TRUNCATED=false" >> $GITHUB_ENV
          fi

      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π –ø–æ —Ñ–∞–π–ª–∞–º (–¥–ª—è inline-–∫–æ–º–º–µ–Ω—Ç–æ–≤)
        id: files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          PR=$PR_NUMBER
          API="${{ github.api_url }}/repos/${{ github.repository }}/pulls/${PR}/files?per_page=100&page="
          page=1
          echo "[]" > files.json
          while :; do
            RESP=$(curl -sSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "${API}${page}")
            COUNT=$(echo "$RESP" | jq 'length')
            jq -s 'add' files.json <(echo "$RESP") > tmp.json && mv tmp.json files.json
            [ "$COUNT" -lt 100 ] && break
            page=$((page+1))
          done
          jq '[ .[] | {path: .filename, status: .status, patch: .patch} | select(.patch != null) ]' files.json > patches.json
          echo "–ü–æ–ª—É—á–µ–Ω–æ $(jq 'length' patches.json) —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–∞—Ç—á–µ–π"

      # ========= Java/Kotlin toolchain =========
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: 'maven'

      - name: –í—ã—è–≤–∏—Ç—å —Å–±–æ—Ä—â–∏–∫ (Gradle/Maven)
        id: buildtool
        run: |
          if [ -f "./gradlew" ] || [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "tool=gradle" >> $GITHUB_OUTPUT
          elif [ -f "pom.xml" ]; then
            echo "tool=maven" >> $GITHUB_OUTPUT
          else
            echo "tool=none" >> $GITHUB_OUTPUT
          fi

      - name: Cache Gradle
        if: steps.buildtool.outputs.tool == 'gradle'
        uses: gradle/actions/setup-gradle@v3

      # ========= Backend build + tests =========
      - name: Backend build & tests
        id: test
        run: |
          set -euo pipefail
          TOOL="${{ steps.buildtool.outputs.tool }}"
          echo "detected=$TOOL"
          if [ "$TOOL" = "gradle" ]; then
            chmod +x ./gradlew || true
            ./gradlew --no-daemon clean test -i
          elif [ "$TOOL" = "maven" ]; then
            mvn -B -e -DskipITs=false -DskipTests=false clean test
          else
            echo "–ù–µ –Ω–∞–π–¥–µ–Ω Gradle/Maven. –ü—Ä–æ–ø—É—Å–∫–∞—é build/tests." >&2
          fi
        continue-on-error: true

      - name: –°–±–æ—Ä –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –æ —Ç–µ—Å—Ç–∞—Ö
        id: tests_summary
        run: |
          # –ü–æ–∏—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –æ—Ç—á—ë—Ç–æ–≤ Gradle/Maven –∏ –≤—ã—Ç–∞—â–∏–º –ø–∞—Ä—É —á–∏—Å–µ–ª
          PASSED=0; FAILED=0; SKIPPED=0
          # Gradle
          if [ -d "**/build/test-results/test" ] || ls -d */build/test-results/test >/dev/null 2>&1; then
            for f in $(find . -path "*/build/test-results/test/*.xml"); do
              p=$(xmllint --xpath "string(/testsuite/@tests)" "$f" 2>/dev/null || echo 0)
              f1=$(xmllint --xpath "string(/testsuite/@failures)" "$f" 2>/dev/null || echo 0)
              e1=$(xmllint --xpath "string(/testsuite/@errors)" "$f" 2>/dev/null || echo 0)
              s=$(xmllint --xpath "string(/testsuite/@skipped)" "$f" 2>/dev/null || echo 0)
              PASSED=$((PASSED + p - f1 - e1 - s))
              FAILED=$((FAILED + f1 + e1))
              SKIPPED=$((SKIPPED + s))
            done
          fi
          # Maven surefire
          if ls -d */target/surefire-reports >/dev/null 2>&1; then
            for f in $(find . -path "*/target/surefire-reports/*.xml"); do
              p=$(xmllint --xpath "string(/testsuite/@tests)" "$f" 2>/dev/null || echo 0)
              f1=$(xmllint --xpath "string(/testsuite/@failures)" "$f" 2>/dev/null || echo 0)
              e1=$(xmllint --xpath "string(/testsuite/@errors)" "$f" 2>/dev/null || echo 0)
              s=$(xmllint --xpath "string(/testsuite/@skipped)" "$f" 2>/dev/null || echo 0)
              PASSED=$((PASSED + p - f1 - e1 - s))
              FAILED=$((FAILED + f1 + e1))
              SKIPPED=$((SKIPPED + s))
            done
          fi
          echo "passed=$PASSED"  >> $GITHUB_OUTPUT
          echo "failed=$FAILED"  >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT

      # ========= (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ª–∏–Ω—Ç–µ—Ä—ã, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ –±–∏–ª–¥-—Å–∫—Ä–∏–ø—Ç–∞—Ö =========
      - name: Java/Kotlin linters (Spotless/Checkstyle/PMD/Detekt/ktlint)
        id: linters
        run: |
          set -euo pipefail
          TOOL="${{ steps.buildtool.outputs.tool }}"
          CODE=0
          if [ "$TOOL" = "gradle" ]; then
            ./gradlew --no-daemon -i \
              spotlessCheck || CODE=$?
            ./gradlew --no-daemon -i \
              checkstyleMain checkstyleTest pmdMain pmdTest detekt || true
          elif [ "$TOOL" = "maven" ]; then
            mvn -B -Dspotless.check.skip=false spotless:check || CODE=$?
            mvn -B checkstyle:check || true
            mvn -B pmd:check || true
          fi
          echo "lint_exit=$CODE" >> $GITHUB_OUTPUT
        continue-on-error: true
# ---------- OpenAI inference ----------
      - name: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (inline + –æ–±—â–∏–µ)
        id: ai
        env:
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
        run: |
          set -euo pipefail
      
          MODEL="${OPENAI_MODEL}"
          GLOBAL=$(jq -Rs . < global.diff)
      
          SYS_PROMPT=$(cat << 'EOF'
          –¢—ã ‚Äî —Å–µ–Ω—å–æ—Ä Backend-–∏–Ω–∂–µ–Ω–µ—Ä (Java/Kotlin, Spring Boot, REST, SQL, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å).
          –í–ê–ñ–ù–û: –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
          –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π PR unified diff –∏ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
          - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å REST/DTO/–≤–∞–ª–∏–¥–∞—Ü–∏–∏; –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫;
          - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å, N+1, –ª–µ–Ω–∏–≤—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏, JDBC/ORM;
          - –∫–æ–Ω—Ñ–∏–≥–∏ Spring (profiles/properties), –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (Spring Security), —Å–µ–∫—Ä–µ—Ç—ã;
          - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∏–Ω–¥–µ–∫—Å—ã, batch), –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å (timeouts/retries);
          - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ/–Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç—å (structured logs, correlation id);
          - —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å, —Å–ª–æ–∏/–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞.
      
          –í–µ—Ä–Ω–∏ –°–¢–†–û–ì–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω–∏–π.
          –§–æ—Ä–º–∞—Ç:
          {
            "inline": [
              {"path":"...", "match":"<—Ç–æ—á–Ω–∞—è_–¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞_–∏–∑_patch>", "message":"...", "severity":"nit|suggestion|warn|error"}
            ],
            "general": [
              {"message":"...", "severity":"nit|suggestion|warn|error"}
            ]
          }
          EOF
          )
      
          # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–¥ Responses API
          REQ=$(jq -n \
            --arg model "$MODEL" \
            --arg sys "$SYS_PROMPT" \
            --arg content "PR unified diff:\n\n$GLOBAL" \
            '{
              model: $model,
              response_format: { type: "json_object" },
              max_output_tokens: 2000,
              messages: [
                { role: "system", content: $sys },
                { role: "user",   content: $content }
              ]
            }')
      
          # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º /v1/responses (–∞ –Ω–µ /v1/chat/completions)
          curl -sS https://api.openai.com/v1/responses \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY_CLEAN" \
            -d "$REQ" \
            -o openai_response.json
      
          # –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å —Å—Ç—Ä–æ–≥–∏–π JSON –∏–∑ Responses API:
          if jq -e '.output_text' openai_response.json >/dev/null 2>&1; then
            if jq -e '.output_text | fromjson' openai_response.json >/dev/null 2>&1; then
              jq -r '.output_text | fromjson' openai_response.json > suggestions.json
              echo "valid=true" >> "$GITHUB_OUTPUT"
              jq -r '.output_text' openai_response.json | head -c 800 > raw_model_response.txt || echo "" > raw_model_response.txt
              exit 0
            fi
          fi
      
          # –§–æ–ª–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ chat.completions —Ñ–æ—Ä–º–∞—Ç–∞, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–º–µ–Ω–∏—Ç endpoint:
          if jq -e '.choices[0].message.content' openai_response.json >/dev/null 2>&1; then
            if jq -e '.choices[0].message.content | fromjson' openai_response.json >/dev/null 2>&1; then
              jq -r '.choices[0].message.content | fromjson' openai_response.json > suggestions.json
              echo "valid=true" >> "$GITHUB_OUTPUT"
              jq -r '.choices[0].message.content' openai_response.json | head -c 800 > raw_model_response.txt || echo "" > raw_model_response.txt
              exit 0
            fi
          fi
      
          # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –∫–ª–∞–¥—ë–º –∑–∞–≥–ª—É—à–∫—É –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥
          jq -r '.' openai_response.json | head -c 800 > raw_model_response.txt || echo "" > raw_model_response.txt
          echo '{"inline":[],"general":[{"message":"–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.","severity":"warn"}]}' > suggestions.json
          echo "valid=false" >> "$GITHUB_OUTPUT"
      
          # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
          jq '{
                inline: ( .inline // [] | (if type=="array" then . else [] end) ),
                general:( .general // [] | (if type=="array" then . else [] end) )
              }' suggestions.json > suggestions.normalized.json
          mv suggestions.normalized.json suggestions.json

      # ========= –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ =========
      - name: –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–≤—å—é
        id: cost
        env:
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
        run: |
          set -euo pipefail
          DIFF_BYTES=$(wc -c < global.diff)
          OVERHEAD=1600
          IN_TOK=$(( (DIFF_BYTES + OVERHEAD) / 4 ))
          if [ -f raw_model_response.txt ]; then
            OUT_BYTES=$(wc -c < raw_model_response.txt)
          else
            OUT_BYTES=0
          fi
          OUT_TOK=$(( OUT_BYTES / 4 ))
          if [ $OUT_TOK -lt 100 ]; then OUT_TOK=100; fi

          MODEL="${OPENAI_MODEL}"
          case "$MODEL" in
            o4-mini|gpt-4o-mini|gpt-4.1-mini) IN_PPM=0.00013; OUT_PPM=0.00050 ;;
            gpt-4o) IN_PPM=0.00500; OUT_PPM=0.01500 ;;
            gpt-4-turbo*) IN_PPM=0.01000; OUT_PPM=0.03000 ;;
            *) IN_PPM=0.00013; OUT_PPM=0.00050 ;;
          esac

          COST=$(awk -v in_t=$IN_TOK -v out_t=$OUT_TOK -v in_p=$IN_PPM -v out_p=$OUT_PPM 'BEGIN{printf "%.4f", (in_t/1000.0)*in_p + (out_t/1000.0)*out_p}')
          echo "input_tokens=$IN_TOK" >> $GITHUB_OUTPUT
          echo "output_tokens=$OUT_TOK" >> $GITHUB_OUTPUT
          echo "cost_usd=$COST" >> $GITHUB_OUTPUT

      # ========= –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω) =========
      - name: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω)
        if: steps.ai.outputs.valid != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const prNumber = Number(process.env.PR_NUMBER);
            let raw = '';
            try { raw = fs.readFileSync('raw_model_response.txt','utf8'); } catch {}
            const preview = (raw || '').slice(0, 800);
            const body = [
              "‚ö†Ô∏è Codex: –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è –≤ JSON. –ò—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç –±–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.",
              "",
              "–ö–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥ (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤):",
              "",
              "```",
              preview || "<–ø—É—Å—Ç–æ>",
              "```",
              "",
              "_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ " + process.env.COMMENT_URL + "_"
            ].join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });

      # ========= –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ =========
      - name: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≤—å—é –≤ GitHub (inline) + –æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        id: publish
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            function readJsonObject(path) {
              try {
                if (!fs.existsSync(path)) return {};
                const raw = String(fs.readFileSync(path, 'utf8') || '').trim();
                if (!raw) return {};
                const data = JSON.parse(raw);
                return (data && typeof data === 'object' && !Array.isArray(data)) ? data : {};
              } catch (e) { return {}; }
            }

            const prNumber = Number(process.env.PR_NUMBER);
            const truncated = process.env.TRUNCATED === 'true';
            const sug = readJsonObject('suggestions.json');
            const inline = Array.isArray(sug.inline) ? sug.inline : [];
            const general = Array.isArray(sug.general) ? sug.general : [];

            let patches = [];
            try {
              const rawP = fs.readFileSync('patches.json','utf8');
              const parsed = JSON.parse(rawP);
              patches = Array.isArray(parsed) ? parsed : [];
            } catch {}

            const patchMap = new Map();
            for (const f of patches) {
              if (!f.path || typeof f.patch !== 'string') continue;
              patchMap.set(f.path, f.patch.split('\n'));
            }

            function findPosition(lines, wanted) {
              if (!Array.isArray(lines) || !wanted) return null;
              const want = String(wanted).trim();
              for (let i = 0; i < lines.length; i++) {
                const line = lines[i] || '';
                if (!line.startsWith('+') || line.startsWith('+++')) continue;
                const added = line.slice(1).trim();
                if (added === want) return i + 1;
              }
              return null;
            }

            const sevEmoji = s => ({nit:'üßπ',suggestion:'üí°',warn:'‚ö†Ô∏è',error:'üö®'})[String(s||'').toLowerCase()] || 'üí¨';

            const comments = [];
            for (const it of inline) {
              if (!it || typeof it !== 'object') continue;
              const { path, match, message, severity } = it;
              const lines = patchMap.get(path);
              if (!lines) continue;
              const pos = findPosition(lines, match);
              if (!pos) continue;
              const body = `${sevEmoji(severity)} ${message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É.'}`;
              comments.push({ path, position: pos, body });
            }

            if (comments.length > 0) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'COMMENT',
                body: `ü§ñ Codex –∏–Ω–ª–∞–π–Ω-—Ä–µ–≤—å—é ‚Ä¢ ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ ${process.env.COMMENT_URL}_`,
                comments
              });
            }

            // –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–æ–≤/–ª–∏–Ω—Ç–µ—Ä–æ–≤:
            const passed = Number('${{ steps.tests_summary.outputs.passed || 0 }}');
            const failed = Number('${{ steps.tests_summary.outputs.failed || 0 }}');
            const skipped = Number('${{ steps.tests_summary.outputs.skipped || 0 }}');
            const lintExit = Number('${{ steps.linters.outputs.lint_exit || 0 }}');

            let generalBody = '';
            const lines = [];

            if (general.length > 0) {
              lines.push(`### ü§ñ Codex –æ–±–∑–æ—Ä PR (–æ–±—â–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è)`);
              for (const g of general) lines.push(`- ${sevEmoji(g.severity)} ${g.message}`);
              lines.push('');
            }
            lines.push(`### üß™ –¢–µ—Å—Ç—ã`);
            lines.push(`- passed: ${passed}, failed: ${failed}, skipped: ${skipped}`);
            lines.push('');
            lines.push(`### üßπ –õ–∏–Ω—Ç–µ—Ä—ã`);
            lines.push(`- exit code: ${lintExit} (0 ‚Äî –æ–∫, !=0 ‚Äî –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è)`);

            if (truncated) lines.push(`\n> ‚ö†Ô∏è –î–∏—Ñ—Ñ –±—ã–ª —É—Å–µ—á—ë–Ω –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.`);
            lines.push(`\n_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ ${process.env.COMMENT_URL}_`);

            generalBody = lines.join("\n");

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: generalBody
            });

            core.setOutput('inline_count', String(comments.length));
            core.setOutput('general_count', String(general.length));
            core.setOutput('truncated', truncated ? 'true' : 'false');

      - name: –ó–∞–≤–µ—Ä—à–µ–Ω–æ
        run: |
          echo "–†–µ–≤—å—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –¥–ª—è PR #$PR_NUMBER"

      - name: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≤—å—é (—Å —Å—á—ë—Ç—á–∏–∫–æ–º + –ø–∏–Ω–≥ –∞–≤—Ç–æ—Ä–∞ + —Å—Ç–æ–∏–º–æ—Å—Ç—å)
        uses: actions/github-script@v7
        with:
          script: |
            const inlineCount = Number('${{ steps.publish.outputs.inline_count || 0 }}');
            const generalCount = Number('${{ steps.publish.outputs.general_count || 0 }}');
            const truncated = '${{ steps.publish.outputs.truncated || 'false' }}' === 'true';
            const actor = process.env.GITHUB_ACTOR || '${{ github.actor }}';
            const cost = '${{ steps.cost.outputs.cost_usd || '0.0000' }}';
            const inTok = '${{ steps.cost.outputs.input_tokens || '0' }}';
            const outTok = '${{ steps.cost.outputs.output_tokens || '0' }}';
            const model = '${{ env.OPENAI_MODEL }}';

            const parts = [
              `ü§ñ Codex: —Ä–µ–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ`,
              ``,
              `–ò—Ç–æ–≥: ${inlineCount} –∏–Ω–ª–∞–π–Ω, ${generalCount} –æ–±—â–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π.` + (truncated ? `\n> ‚ö†Ô∏è –î–∏—Ñ—Ñ –±—ã–ª —É—Å–µ—á—ë–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.` : ''),
              ``,
              `–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: ~ $${cost} (in: ${inTok} tok, out: ${outTok} tok, model: ${model})`,
              ``,
              `–ó–∞–ø—É—Å—Ç–∏–ª: @${actor}`,
              ``,
              `_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ ${process.env.COMMENT_URL}_`
            ];

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.PR_NUMBER),
              body: parts.join("\n")
            });
